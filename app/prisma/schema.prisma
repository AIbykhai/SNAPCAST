// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  brandProfiles BrandProfile[]
  posts         Post[]
  sessions      Session[]
  keys          Key[]
}

model BrandProfile {
  id             String   @id @default(cuid())
  userId         String
  name           String
  description    String
  tone           String
  targetAudience String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  posts          Post[]

  @@index([userId])
}

model Post {
  id            String         @id @default(cuid())
  userId        String
  brandProfileId String
  content       String
  platform      String
  status        String
  scheduledAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  brandProfile  BrandProfile   @relation(fields: [brandProfileId], references: [id])
  scheduledPosts ScheduledPost[]

  @@index([userId])
}

model ScheduledPost {
  id            String   @id @default(cuid())
  postId        String
  scheduledTime DateTime
  platform      String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  post          Post     @relation(fields: [postId], references: [id])

  @@index([scheduledTime])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Key {
  id              String  @id @default(cuid())
  hashedPassword  String?
  userId          String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
