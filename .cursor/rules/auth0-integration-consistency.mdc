---
description: 
globs: 
alwaysApply: false
---
# Auth0 Integration Consistency

All Auth0-related logic (tokens, guards, user-info) lives under auth/ with one file per concern (e.g. AuthGuard.ts, AuthService.ts).

## Path Pattern
backend/src/auth/**/*.ts

## Implementation Guidelines
- Centralize all Auth0 logic in dedicated auth directory
- Split functionality into distinct files by concern
- Create middleware for authentication and authorization
- Implement consistent error handling for auth issues
- Use TypeScript interfaces to model user and token structures

## Example Structure
```
backend/src/auth/
  ├── AuthService.ts
  ├── AuthGuard.ts
  ├── JwtStrategy.ts
  ├── Auth0Client.ts
  ├── interfaces/
  │   ├── User.interface.ts
  │   ├── Token.interface.ts
  ├── middleware/
  │   ├── requireAuth.ts
  │   ├── requireRoles.ts
  ├── decorators/
  │   ├── CurrentUser.ts
```

## Example Implementation
```typescript
// backend/src/auth/AuthService.ts
import { Auth0Client } from './Auth0Client';
import { User } from './interfaces/User.interface';

export class AuthService {
  private auth0Client: Auth0Client;
  
  constructor() {
    this.auth0Client = new Auth0Client();
  }
  
  async validateToken(token: string): Promise<boolean> {
    try {
      // Validate token with Auth0
      return true;
    } catch (error) {
      return false;
    }
  }
  
  async getUserProfile(userId: string): Promise<User> {
    // Get user profile from Auth0
    return this.auth0Client.getUserById(userId);
  }
}
```
